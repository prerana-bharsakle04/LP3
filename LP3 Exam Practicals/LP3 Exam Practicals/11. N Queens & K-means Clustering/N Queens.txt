def is_safe(board, row, col, N):
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on left side
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_nqueens_util(board, col, N):
    if col == N:
        return True

    for i in range(N):
        if is_safe(board, i, col, N):
            board[i][col] = 1

            if solve_nqueens_util(board, col + 1, N):
                return True

            # Backtrack if this placement doesn't lead to a solution
            board[i][col] = 0

    return False

def solve_nqueens(N):
    board = [[0 for _ in range(N)] for _ in range(N)]

    if not solve_nqueens_util(board, 0, N):
        print("Solution does not exist")
        return False

    # Print the board with 'Q' for queens and '*' for empty spaces
    for i in range(N):
        for j in range(N):
            if board[i][j] == 1:
                print('Q', end=" ")
            else:
                print('*', end=" ")
        print()  # Move to the next line
    return True

# Get user input for N
N = int(input("Enter the value of N: "))

solve_nqueens(N)
